// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using nemesis.Models.Contexts;

#nullable disable

namespace nemesis.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230511163832_StatusTable")]
    partial class StatusTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "68a525ac-d446-4c8c-983c-047afdffed13",
                            ConcurrencyStamp = "2e7d8e26-78c2-4261-af8e-b507b61f0ac2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fca95d41-370a-4218-b0aa-8502494448fb",
                            ConcurrencyStamp = "2f45cf87-60e1-49a9-87d5-e0632eb5c51b",
                            Name = "Investigator",
                            NormalizedName = "INVESTIGATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fac97539-cb0b-4b9f-ae20-497eafb414bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3cbcd9b-46a0-4b87-b057-8d74d3b6f570",
                            Email = "su@do.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SU@DO.COM",
                            NormalizedUserName = "SUDO",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97f04796-2602-4601-a849-0025a4bd1cb2",
                            TwoFactorEnabled = false,
                            UserName = "Sudo"
                        },
                        new
                        {
                            Id = "92b32ccb-8835-4e2d-ae6c-8c86eb2efed6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "111bb32e-5ed3-4bb7-b2c2-f71993a3ee20",
                            Email = "cop2@mall.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COP2@MALL.COM",
                            NormalizedUserName = "PAULBLART",
                            PhoneNumber = "911911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c036f59-7870-4b66-b243-fef58c3d7c5a",
                            TwoFactorEnabled = false,
                            UserName = "PaulBlart"
                        },
                        new
                        {
                            Id = "9059e247-2854-40bd-af2b-76088f8dd4e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f9b9f92-cb17-4281-81d2-92060c58abb8",
                            Email = "gadget@inspect.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GADGET@INSPECT.COM",
                            NormalizedUserName = "INSPECTORGADGET",
                            PhoneNumber = "23480922",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46fe7687-8839-4454-b135-2f13ba77269b",
                            TwoFactorEnabled = false,
                            UserName = "InspectorGadget"
                        },
                        new
                        {
                            Id = "84b91c9f-74d1-452d-927b-439bfd3a7287",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbb3904a-ed11-4c5f-aa90-f1216df48723",
                            Email = "element@inspect.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELEMENT@INSPECT.COM",
                            NormalizedUserName = "ELEMENT",
                            PhoneNumber = "(650) 253-0000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b63b3f6-aa49-473d-8a78-41173d7cd787",
                            TwoFactorEnabled = false,
                            UserName = "Element"
                        },
                        new
                        {
                            Id = "5888e361-c81f-4ac9-8e16-961b0eeed0ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f487c329-74a0-47ae-a7fb-ca9155fdf817",
                            Email = "cetta@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CETTA@HOTMAIL.COM",
                            NormalizedUserName = "CETTA",
                            PhoneNumber = "21249200",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13b52c96-85a5-4fc5-a9aa-78f80154cb10",
                            TwoFactorEnabled = false,
                            UserName = "Cetta"
                        },
                        new
                        {
                            Id = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ec16ec0-21e7-4def-a0f4-cfe0f8bff626",
                            Email = "karen@qrid.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAREN@QRID.COM",
                            NormalizedUserName = "KAREN",
                            PhoneNumber = "10291029",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7289718b-4d09-46ad-a68c-f1656d7b03f8",
                            TwoFactorEnabled = false,
                            UserName = "Karen"
                        },
                        new
                        {
                            Id = "555e52b8-22db-4c15-a037-107016c7f827",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90dfab77-c4db-4cc6-8be3-24e47b6a19a0",
                            Email = "CandiceFlynn@snitch.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CANDICEFLYNN@SNITCH.COM",
                            NormalizedUserName = "CANDICE",
                            PhoneNumber = "201920192",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8901578-23e7-455e-95b8-eba36b7f6d13",
                            TwoFactorEnabled = false,
                            UserName = "Candice"
                        },
                        new
                        {
                            Id = "5cefc46b-1918-4ae3-8a40-4d337ff9a670",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c39a664d-e38e-436b-859f-5d41c3330b9f",
                            Email = "head@snitch.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HEAD@SNITCH.COM",
                            NormalizedUserName = "6IX9INE",
                            PhoneNumber = "1231233412",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b583d8d6-0c5f-44b5-82ef-085da57ca2fc",
                            TwoFactorEnabled = false,
                            UserName = "6ix9ine"
                        },
                        new
                        {
                            Id = "3303fdaf-f438-4582-8f10-52b578c50cb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82e0fedf-c456-48d2-87a7-0142db5f6ef9",
                            Email = "homework@reminder.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOMEWORK@REMINDER.COM",
                            NormalizedUserName = "HOMEWORKREMINDER",
                            PhoneNumber = "123412521",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58075920-cbdf-4363-b6cd-a0e13130c894",
                            TwoFactorEnabled = false,
                            UserName = "homeworkReminder"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fac97539-cb0b-4b9f-ae20-497eafb414bc",
                            RoleId = "68a525ac-d446-4c8c-983c-047afdffed13"
                        },
                        new
                        {
                            UserId = "fac97539-cb0b-4b9f-ae20-497eafb414bc",
                            RoleId = "fca95d41-370a-4218-b0aa-8502494448fb"
                        },
                        new
                        {
                            UserId = "92b32ccb-8835-4e2d-ae6c-8c86eb2efed6",
                            RoleId = "fca95d41-370a-4218-b0aa-8502494448fb"
                        },
                        new
                        {
                            UserId = "9059e247-2854-40bd-af2b-76088f8dd4e6",
                            RoleId = "fca95d41-370a-4218-b0aa-8502494448fb"
                        },
                        new
                        {
                            UserId = "84b91c9f-74d1-452d-927b-439bfd3a7287",
                            RoleId = "fca95d41-370a-4218-b0aa-8502494448fb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("nemesis.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Uncategorised"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unsafe act"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Condition"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Structure"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Apocalyptic Event"
                        });
                });

            modelBuilder.Entity("nemesis.Models.Investigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvestigatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Investigations");
                });

            modelBuilder.Entity("nemesis.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfReport")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSpotted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvestigationId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 6,
                            CreatedByUserId = "555e52b8-22db-4c15-a037-107016c7f827",
                            DateOfReport = new DateTime(2023, 4, 23, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4024),
                            DateSpotted = new DateTime(2023, 4, 21, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4012),
                            Description = "I've recently discovered that the Maghtab garbage dump is actually an active volcano. Not only that, it's apparently sentient and has been constantly demanding tribute in the form of human sacrifice, will the authorities please do something about this before it loses its patience and destroys us all?!",
                            ImageUrl = "/images/SentientVolcano.jpg",
                            Location = "Maghtab",
                            StatusId = 1,
                            Title = "Sentient volcano",
                            Upvotes = 178
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            CreatedByUserId = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            DateOfReport = new DateTime(2023, 4, 29, 19, 2, 32, 67, DateTimeKind.Utc).AddTicks(4028),
                            DateSpotted = new DateTime(2023, 4, 29, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4028),
                            Description = "Someone must be having a bad morning because as I was driving up to work, a truck tyre bounced off my dashboard and kept rolling down the road! I hope some unsuspecting jogger doesn't cross its path because then he'll definitely end up getting 'tyred'.",
                            ImageUrl = "/images/RunawayTyre.jpg",
                            Location = "Birzebbugia",
                            StatusId = 1,
                            Title = "Runaway Tyre",
                            Upvotes = 43
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedByUserId = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            DateOfReport = new DateTime(2023, 4, 30, 17, 50, 32, 67, DateTimeKind.Utc).AddTicks(4031),
                            DateSpotted = new DateTime(2023, 4, 30, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4030),
                            Description = "Just this evening I took the kids to the children's playground and was shocked when I noticed that one of them had grown an extra appendage! Apparently while I was chatting with the other parents, the kids had found a barrel of radioactive waste hidden in a small room underneath the playground and were making sand castles out of the stuff!",
                            ImageUrl = "/images/RadioactiveBarrel.jpg",
                            Location = "Hal-Qormi",
                            StatusId = 1,
                            Title = "Radioactive Barrels",
                            Upvotes = 482
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedByUserId = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            DateOfReport = new DateTime(2023, 5, 6, 19, 2, 32, 67, DateTimeKind.Utc).AddTicks(4033),
                            DateSpotted = new DateTime(2023, 5, 6, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4033),
                            Description = "There is a missing manhole cover on the highway just outside of Cikku bar, I think the storm last night dislodged it and now it's posing a danger to anyone driving through that road. I hope it gets investigated before someone gets hurt!",
                            ImageUrl = "/images/Manhole.jpg",
                            Location = "Haz-Zebbug",
                            StatusId = 1,
                            Title = "Missing manhole cover",
                            Upvotes = 25
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedByUserId = "afdb900f-344d-4bf7-9239-34a2e",
                            DateOfReport = new DateTime(2023, 5, 9, 19, 2, 32, 67, DateTimeKind.Utc).AddTicks(4036),
                            DateSpotted = new DateTime(2023, 5, 9, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4035),
                            Description = "I heard some commotion last night but thought it was just the local gang of racoons as usual so I slept through it. This morning, I find that a meteor containing alien worms had crash landed in my backyard! At first I came out with my trusty broomstick but it turns out they're incredibly friendly! I assure you they absolutely have not infiltrated my brain, and are definitely not forcing me to write this. By the way everyone should come see for themselves as soon as possible, the Hivemind demands it.",
                            ImageUrl = "/images/Meteor.jpg",
                            Location = "Siggiewi",
                            StatusId = 1,
                            Title = "Meteor in my backyard",
                            Upvotes = 782
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CreatedByUserId = "afdb900f-344d-4bf7-9239-34a2e",
                            DateOfReport = new DateTime(2023, 5, 8, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4038),
                            DateSpotted = new DateTime(2023, 5, 8, 4, 38, 32, 67, DateTimeKind.Utc).AddTicks(4037),
                            Description = "I was taking a lovely stroll on the beach last night when suddenly, my partner noted that the ancient old god Cthulhu had manifested out of the sea, heralding the end of days for humanity and all life as we know it!",
                            ImageUrl = "/images/Cthulhu.jpg",
                            Location = "Ghar Lapsi",
                            StatusId = 1,
                            Title = "Old God rises from the depths",
                            Upvotes = 777
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedByUserId = "5888e361-c81f-4ac9-8e16-961b0eeed0ae",
                            DateOfReport = new DateTime(2023, 5, 9, 7, 2, 32, 67, DateTimeKind.Utc).AddTicks(4040),
                            DateSpotted = new DateTime(2023, 5, 9, 4, 38, 32, 67, DateTimeKind.Utc).AddTicks(4040),
                            Description = "We were having lunch at Zeppi's Diner last night when suddenly, a rodent the size of a car scurried out of the kitchen! I have to say it really put us off finishing the meal. I hope the food safety authorities see this post!",
                            ImageUrl = "/images/GiantRodent.jpg",
                            Location = "Hamrun",
                            StatusId = 1,
                            Title = "Giant rodent",
                            Upvotes = 246
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedByUserId = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            DateOfReport = new DateTime(2023, 5, 9, 19, 2, 32, 67, DateTimeKind.Utc).AddTicks(4042),
                            DateSpotted = new DateTime(2023, 5, 9, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4042),
                            Description = "We went out for dinner at Fonzu's last night and were having a great time! Hats off to the guy who was playing the accordion with his feet. I ordered the special 'Fonzu's Burger' off the menu, and, to say the least, was shocked when the waitress brought it to the table. It was just a clump of greasy hair! I don't know who thought this was a good idea or how it passed any form of review! Talk about finding a hair in the food! ",
                            ImageUrl = "/images/HairBurger.jpeg",
                            Location = "Naxxar",
                            StatusId = 1,
                            Title = "Hairy Burger",
                            Upvotes = 52
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatedByUserId = "5cefc46b-1918-4ae3-8a40-4d337ff9a670",
                            DateOfReport = new DateTime(2023, 5, 10, 4, 38, 32, 67, DateTimeKind.Utc).AddTicks(4046),
                            DateSpotted = new DateTime(2023, 5, 9, 23, 50, 32, 67, DateTimeKind.Utc).AddTicks(4045),
                            Description = "I was out shopping with the kids when we came across a passed out man in the middle of the sidewalk. Normally I wouldn't post something like this, because let's face it, we've all been there. However, what really bothered me was that he was snoring so loud it sounded like an entire trombone orchestra! Simply unacceptable!",
                            ImageUrl = "/images/ManPassedOut.jpg",
                            Location = "Bormla",
                            StatusId = 1,
                            Title = "Passed out man",
                            Upvotes = 120
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 6,
                            CreatedByUserId = "afdb900f-344d-4bf7-9239-34a2e",
                            DateOfReport = new DateTime(2023, 5, 10, 21, 26, 32, 67, DateTimeKind.Utc).AddTicks(4048),
                            DateSpotted = new DateTime(2023, 5, 10, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4047),
                            Description = "HOW IS THIS ACCEPTABLE!? MY FAVOURITE HEINZ BAKED BEANZ HAVE BEEN OUT OF STOCK FOR THE LAST 2 DAYS!??!1?111? HOW AM I SUPPOSED TO FEED MY CHILDREN A NUTRITIOUS BREAKFAST IF I DON'T HAVE ANY BEANZ! WHY AREN'T THERE ANY BEANZ!?!11?",
                            ImageUrl = "/images/MissingBeans.webp",
                            Location = "Mosta",
                            StatusId = 1,
                            Title = "MISSING BEANZ",
                            Upvotes = 345
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedByUserId = "5888e361-c81f-4ac9-8e16-961b0eeed0ae",
                            DateOfReport = new DateTime(2023, 5, 11, 9, 26, 32, 67, DateTimeKind.Utc).AddTicks(4113),
                            DateSpotted = new DateTime(2023, 5, 11, 4, 38, 32, 67, DateTimeKind.Utc).AddTicks(4112),
                            Description = "Like most of you, I buy my toilet paper from the gas station. I was disgusted this morning when some --redacted-- bought out the entire shop! Does this guy have ten --redacted--!? How am I supposed to wipe my --redacted-- without any toilet paper?!",
                            ImageUrl = "/images/ToiletPaperHoarder.jpg",
                            Location = "Mosta",
                            StatusId = 1,
                            Title = "Toilet Paper Hoarder",
                            Upvotes = 498
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            CreatedByUserId = "84b91c9f-74d1-452d-927b-439bfd3a7287",
                            DateOfReport = new DateTime(2023, 5, 11, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4116),
                            DateSpotted = new DateTime(2023, 5, 10, 16, 38, 32, 67, DateTimeKind.Utc).AddTicks(4115),
                            Description = "Imposter detected!!!!!!\n This van tried to impersonate Dr Chris Porter (PhD, MD, JD, MBA, MS, MFA, DSc, DPhil, DEd, DPT, DVM, DSW, DMus, DEng, DM, DNurs, DLit, DDS, DClinPsy, DPharm, DArch, and DBA), the erudite, brilliant, innovative, charismatic, awe-inspiring, compassionate, visionary, and unparalleled intellectual powerhouse, whose prodigious knowledge, remarkable expertise, and boundless passion for teaching have transformed countless minds and left an indelible mark on the realm of academia.\n\nps: chatgpt is really useful",
                            ImageUrl = "/images/Porter.jpg",
                            Location = "London",
                            StatusId = 1,
                            Title = "Porter imposter",
                            Upvotes = 2000
                        });
                });

            modelBuilder.Entity("nemesis.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Being Investigated,"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "No Action Required"
                        });
                });

            modelBuilder.Entity("nemesis.ViewModels.CategoryViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryViewModel");
                });

            modelBuilder.Entity("nemesis.ViewModels.ReportViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfReport")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSpotted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvestigationId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ReportViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("nemesis.Models.Report", b =>
                {
                    b.HasOne("nemesis.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("nemesis.ViewModels.ReportViewModel", b =>
                {
                    b.HasOne("nemesis.ViewModels.CategoryViewModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
