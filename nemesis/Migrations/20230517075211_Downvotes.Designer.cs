// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using nemesis.Models.Contexts;

#nullable disable

namespace nemesis.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230517075211_Downvotes")]
    partial class Downvotes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "68a525ac-d446-4c8c-983c-047afdffed13",
                            ConcurrencyStamp = "f64c0f21-6c08-4bb5-87fd-a4fb3be02ade",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fca95d41-370a-4218-b0aa-8502494448fb",
                            ConcurrencyStamp = "57e8fbdb-9ca8-4fd5-b6ad-56b56f99fed5",
                            Name = "Investigator",
                            NormalizedName = "INVESTIGATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fac97539-cb0b-4b9f-ae20-497eafb414bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58909858-da46-4117-98f3-f3094341dad8",
                            Email = "su@do.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SU@DO.COM",
                            NormalizedUserName = "SUDO",
                            PasswordHash = "AQAAAAEAACcQAAAAELfXOuevoH6PpvF2nf42kqntbi6S0VgvgyPOrF1Y98HnsOLmhzEU6U3qDe3Z1GPJFg==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7c8de98-0487-40b8-9d6e-51ecfabab9f6",
                            TwoFactorEnabled = false,
                            UserName = "Sudo"
                        },
                        new
                        {
                            Id = "92b32ccb-8835-4e2d-ae6c-8c86eb2efed6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7957117c-7909-40c7-8f5d-266a0c290944",
                            Email = "cop2@mall.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COP2@MALL.COM",
                            NormalizedUserName = "PAULBLART",
                            PasswordHash = "AQAAAAEAACcQAAAAEA1ecs3XxpzxsCa2yMUeYR1UXkAbO5bbR8ADGzI62dmIVLVsq0c6DBNRe9aWhK9pHg==",
                            PhoneNumber = "911911",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "251bb846-b93d-4f82-8e62-a09facd81cf9",
                            TwoFactorEnabled = false,
                            UserName = "PaulBlart"
                        },
                        new
                        {
                            Id = "9059e247-2854-40bd-af2b-76088f8dd4e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa3c3e95-6040-478c-9d86-e61b8fb0c4f1",
                            Email = "gadget@inspect.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GADGET@INSPECT.COM",
                            NormalizedUserName = "INSPECTORGADGET",
                            PasswordHash = "AQAAAAEAACcQAAAAEMYx+WoLemP69Qg9c9vRnlKxjWuxoUfsISn+WIf+yWZUoumWohZF4ONuLhsH5XKs7A==",
                            PhoneNumber = "23480922",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37a7a15f-e3c9-490c-bbba-a60004025eb5",
                            TwoFactorEnabled = false,
                            UserName = "InspectorGadget"
                        },
                        new
                        {
                            Id = "84b91c9f-74d1-452d-927b-439bfd3a7287",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8e49e76-848e-469c-abc5-c140a772a747",
                            Email = "element@inspect.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELEMENT@INSPECT.COM",
                            NormalizedUserName = "ELEMENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEIRDeVAXOA4xi6Z752w2UzZjnnyBzTAIMnatJObS7S84+HKm5j4VSaRZKMnseRKlpQ==",
                            PhoneNumber = "(650) 253-0000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "468c8ba3-b8df-45fd-aa97-c4c67dd7c01a",
                            TwoFactorEnabled = false,
                            UserName = "Element"
                        },
                        new
                        {
                            Id = "5888e361-c81f-4ac9-8e16-961b0eeed0ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7231873-5b2e-4577-a418-e3a61f27733a",
                            Email = "cetta@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CETTA@HOTMAIL.COM",
                            NormalizedUserName = "CETTA",
                            PasswordHash = "AQAAAAEAACcQAAAAENvwzQDupZQt3O3QYn63yOFS7aUFjHPzCUA/Q0lacDJfOGOIQRP1CyeygEac3uUIHA==",
                            PhoneNumber = "21249200",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e9a4236-f97b-48e7-a059-fcc67bd33f26",
                            TwoFactorEnabled = false,
                            UserName = "Cetta"
                        },
                        new
                        {
                            Id = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9068b66c-8391-43af-89a7-83cfb681ea9e",
                            Email = "karen@qrid.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAREN@QRID.COM",
                            NormalizedUserName = "KAREN",
                            PasswordHash = "AQAAAAEAACcQAAAAEC6Ad2L92quYiSaIf0USLpWglzxVIwo/8luywsp3bwXSEGkgHWQidranB0hsCaMReg==",
                            PhoneNumber = "10291029",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de6d12b1-823e-49c1-98dc-205f99a169c1",
                            TwoFactorEnabled = false,
                            UserName = "Karen"
                        },
                        new
                        {
                            Id = "555e52b8-22db-4c15-a037-107016c7f827",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f14f5ed-262f-4827-ae1e-7a1acf537e9e",
                            Email = "CandiceFlynn@snitch.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CANDICEFLYNN@SNITCH.COM",
                            NormalizedUserName = "CANDICE",
                            PasswordHash = "AQAAAAEAACcQAAAAED9sLQUiOuF8ASWJQCgQv0d2emAN1MbTVuJAjlEHCDXsSzYrepKtMJM3jGDLsJLKfQ==",
                            PhoneNumber = "201920192",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e5e7717-3034-4f80-b73b-c58e03c22b8f",
                            TwoFactorEnabled = false,
                            UserName = "Candice"
                        },
                        new
                        {
                            Id = "5cefc46b-1918-4ae3-8a40-4d337ff9a670",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f92bb13-5f5d-4090-ad74-7d3c40bc15e5",
                            Email = "head@snitch.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HEAD@SNITCH.COM",
                            NormalizedUserName = "6IX9INE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOqawNmn2H3o8QMA8oyLwBMqyiiy1SACU6bBkqQv9K55YiqkkZIy2A425iLuF0XBGg==",
                            PhoneNumber = "1231233412",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e9b8b6f-b885-4ff0-8c99-fa491b7bab04",
                            TwoFactorEnabled = false,
                            UserName = "6ix9ine"
                        },
                        new
                        {
                            Id = "3303fdaf-f438-4582-8f10-52b578c50cb8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69b67ddc-ac4e-48fc-8cc1-2d70d2ef8d77",
                            Email = "homework@reminder.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOMEWORK@REMINDER.COM",
                            NormalizedUserName = "HOMEWORKREMINDER",
                            PasswordHash = "AQAAAAEAACcQAAAAENy+F3BhBclcrg1e25ZtuWzBAK597cCg5hyYggPxTH6o5YX6hBR0pX/hADv5+1Ejqg==",
                            PhoneNumber = "123412521",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d64b1ea-5817-4768-a178-eab7d4a1a375",
                            TwoFactorEnabled = false,
                            UserName = "homeworkReminder"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fac97539-cb0b-4b9f-ae20-497eafb414bc",
                            RoleId = "68a525ac-d446-4c8c-983c-047afdffed13"
                        },
                        new
                        {
                            UserId = "fac97539-cb0b-4b9f-ae20-497eafb414bc",
                            RoleId = "fca95d41-370a-4218-b0aa-8502494448fb"
                        },
                        new
                        {
                            UserId = "92b32ccb-8835-4e2d-ae6c-8c86eb2efed6",
                            RoleId = "fca95d41-370a-4218-b0aa-8502494448fb"
                        },
                        new
                        {
                            UserId = "9059e247-2854-40bd-af2b-76088f8dd4e6",
                            RoleId = "fca95d41-370a-4218-b0aa-8502494448fb"
                        },
                        new
                        {
                            UserId = "84b91c9f-74d1-452d-927b-439bfd3a7287",
                            RoleId = "fca95d41-370a-4218-b0aa-8502494448fb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("nemesis.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Uncategorised"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unsafe act"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Condition"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Equipment"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Structure"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Apocalyptic Event"
                        });
                });

            modelBuilder.Entity("nemesis.Models.Investigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfAction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvestigatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Investigations");
                });

            modelBuilder.Entity("nemesis.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfReport")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSpotted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvestigationId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 6,
                            CreatedByUserId = "555e52b8-22db-4c15-a037-107016c7f827",
                            DateOfReport = new DateTime(2023, 4, 29, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8947),
                            DateSpotted = new DateTime(2023, 4, 27, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8942),
                            Description = "I've recently discovered that the Maghtab garbage dump is actually an active volcano. Not only that, it's apparently sentient and has been constantly demanding tribute in the form of human sacrifice, will the authorities please do something about this before it loses its patience and destroys us all?!",
                            ImageUrl = "/images/SentientVolcano.jpg",
                            InvestigationId = 1,
                            Location = "Maghtab",
                            StatusId = 1,
                            Title = "Sentient volcano"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            CreatedByUserId = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            DateOfReport = new DateTime(2023, 5, 5, 10, 16, 10, 788, DateTimeKind.Utc).AddTicks(8951),
                            DateSpotted = new DateTime(2023, 5, 5, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8950),
                            Description = "Someone must be having a bad morning because as I was driving up to work, a truck tyre bounced off my dashboard and kept rolling down the road! I hope some unsuspecting jogger doesn't cross its path because then he'll definitely end up getting 'tyred'.",
                            ImageUrl = "/images/RunawayTyre.jpg",
                            InvestigationId = 2,
                            Location = "Birzebbugia",
                            StatusId = 1,
                            Title = "Runaway Tyre"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedByUserId = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            DateOfReport = new DateTime(2023, 5, 6, 9, 4, 10, 788, DateTimeKind.Utc).AddTicks(8953),
                            DateSpotted = new DateTime(2023, 5, 6, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8952),
                            Description = "Just this evening I took the kids to the children's playground and was shocked when I noticed that one of them had grown an extra appendage! Apparently while I was chatting with the other parents, the kids had found a barrel of radioactive waste hidden in a small room underneath the playground and were making sand castles out of the stuff!",
                            ImageUrl = "/images/RadioactiveBarrel.jpg",
                            Location = "Hal-Qormi",
                            StatusId = 1,
                            Title = "Radioactive Barrels"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedByUserId = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            DateOfReport = new DateTime(2023, 5, 12, 10, 16, 10, 788, DateTimeKind.Utc).AddTicks(8954),
                            DateSpotted = new DateTime(2023, 5, 12, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8954),
                            Description = "There is a missing manhole cover on the highway just outside of Cikku bar, I think the storm last night dislodged it and now it's posing a danger to anyone driving through that road. I hope it gets investigated before someone gets hurt!",
                            ImageUrl = "/images/Manhole.jpg",
                            Location = "Haz-Zebbug",
                            StatusId = 1,
                            Title = "Missing manhole cover"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedByUserId = "afdb900f-344d-4bf7-9239-34a2e",
                            DateOfReport = new DateTime(2023, 5, 15, 10, 16, 10, 788, DateTimeKind.Utc).AddTicks(8956),
                            DateSpotted = new DateTime(2023, 5, 15, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8956),
                            Description = "I heard some commotion last night but thought it was just the local gang of racoons as usual so I slept through it. This morning, I find that a meteor containing alien worms had crash landed in my backyard! At first I came out with my trusty broomstick but it turns out they're incredibly friendly! I assure you they absolutely have not infiltrated my brain, and are definitely not forcing me to write this. By the way everyone should come see for themselves as soon as possible, the Hivemind demands it.",
                            ImageUrl = "/images/Meteor.jpg",
                            Location = "Siggiewi",
                            StatusId = 1,
                            Title = "Meteor in my backyard"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CreatedByUserId = "afdb900f-344d-4bf7-9239-34a2e",
                            DateOfReport = new DateTime(2023, 5, 14, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8958),
                            DateSpotted = new DateTime(2023, 5, 13, 19, 52, 10, 788, DateTimeKind.Utc).AddTicks(8957),
                            Description = "I was taking a lovely stroll on the beach last night when suddenly, my partner noted that the ancient old god Cthulhu had manifested out of the sea, heralding the end of days for humanity and all life as we know it!",
                            ImageUrl = "/images/Cthulhu.jpg",
                            Location = "Ghar Lapsi",
                            StatusId = 1,
                            Title = "Old God rises from the depths"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedByUserId = "5888e361-c81f-4ac9-8e16-961b0eeed0ae",
                            DateOfReport = new DateTime(2023, 5, 14, 22, 16, 10, 788, DateTimeKind.Utc).AddTicks(8959),
                            DateSpotted = new DateTime(2023, 5, 14, 19, 52, 10, 788, DateTimeKind.Utc).AddTicks(8959),
                            Description = "We were having lunch at Zeppi's Diner last night when suddenly, a rodent the size of a car scurried out of the kitchen! I have to say it really put us off finishing the meal. I hope the food safety authorities see this post!",
                            ImageUrl = "/images/GiantRodent.png",
                            Location = "Hamrun",
                            StatusId = 1,
                            Title = "Giant rodent"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedByUserId = "ad9a20a1-779e-4991-8881-9af6171668a5",
                            DateOfReport = new DateTime(2023, 5, 15, 10, 16, 10, 788, DateTimeKind.Utc).AddTicks(8961),
                            DateSpotted = new DateTime(2023, 5, 15, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8961),
                            Description = "We went out for dinner at Fonzu's last night and were having a great time! Hats off to the guy who was playing the accordion with his feet. I ordered the special 'Fonzu's Burger' off the menu, and, to say the least, was shocked when the waitress brought it to the table. It was just a clump of greasy hair! I don't know who thought this was a good idea or how it passed any form of review! Talk about finding a hair in the food! ",
                            ImageUrl = "/images/HairBurger.jpeg",
                            Location = "Naxxar",
                            StatusId = 1,
                            Title = "Hairy Burger"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatedByUserId = "5cefc46b-1918-4ae3-8a40-4d337ff9a670",
                            DateOfReport = new DateTime(2023, 5, 15, 19, 52, 10, 788, DateTimeKind.Utc).AddTicks(8963),
                            DateSpotted = new DateTime(2023, 5, 15, 15, 4, 10, 788, DateTimeKind.Utc).AddTicks(8962),
                            Description = "I was out shopping with the kids when we came across a passed out man in the middle of the sidewalk. Normally I wouldn't post something like this, because let's face it, we've all been there. However, what really bothered me was that he was snoring so loud it sounded like an entire trombone orchestra! Simply unacceptable!",
                            ImageUrl = "/images/ManPassedOut.jpg",
                            Location = "Bormla",
                            StatusId = 1,
                            Title = "Passed out man"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 6,
                            CreatedByUserId = "afdb900f-344d-4bf7-9239-34a2e",
                            DateOfReport = new DateTime(2023, 5, 16, 12, 40, 10, 788, DateTimeKind.Utc).AddTicks(8965),
                            DateSpotted = new DateTime(2023, 5, 16, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8964),
                            Description = "HOW IS THIS ACCEPTABLE!? MY FAVOURITE HEINZ BAKED BEANZ HAVE BEEN OUT OF STOCK FOR THE LAST 2 DAYS!??!1?111? HOW AM I SUPPOSED TO FEED MY CHILDREN A NUTRITIOUS BREAKFAST IF I DON'T HAVE ANY BEANZ! WHY AREN'T THERE ANY BEANZ!?!11?",
                            ImageUrl = "/images/MissingBeans.webp",
                            Location = "Mosta",
                            StatusId = 1,
                            Title = "MISSING BEANZ"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedByUserId = "5888e361-c81f-4ac9-8e16-961b0eeed0ae",
                            DateOfReport = new DateTime(2023, 5, 17, 0, 40, 10, 788, DateTimeKind.Utc).AddTicks(8966),
                            DateSpotted = new DateTime(2023, 5, 16, 19, 52, 10, 788, DateTimeKind.Utc).AddTicks(8966),
                            Description = "Like most of you, I buy my toilet paper from the gas station. I was disgusted this morning when some --redacted-- bought out the entire shop! Does this guy have ten --redacted--!? How am I supposed to wipe my --redacted-- without any toilet paper?!",
                            ImageUrl = "/images/ToiletPaperHoarder.jpg",
                            Location = "Mosta",
                            StatusId = 1,
                            Title = "Toilet Paper Hoarder"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            CreatedByUserId = "84b91c9f-74d1-452d-927b-439bfd3a7287",
                            DateOfReport = new DateTime(2023, 5, 17, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8969),
                            DateSpotted = new DateTime(2023, 5, 16, 7, 52, 10, 788, DateTimeKind.Utc).AddTicks(8969),
                            Description = "Imposter detected!!!!!!\n This van tried to impersonate Dr Chris Porter (PhD, MD, JD, MBA, MS, MFA, DSc, DPhil, DEd, DPT, DVM, DSW, DMus, DEng, DM, DNurs, DLit, DDS, DClinPsy, DPharm, DArch, and DBA), the erudite, brilliant, innovative, charismatic, awe-inspiring, compassionate, visionary, and unparalleled intellectual powerhouse, whose prodigious knowledge, remarkable expertise, and boundless passion for teaching have transformed countless minds and left an indelible mark on the realm of academia.\n\nps: chatgpt is really useful",
                            ImageUrl = "/images/Porter.jpg",
                            Location = "London",
                            StatusId = 1,
                            Title = "Porter imposter"
                        });
                });

            modelBuilder.Entity("nemesis.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Being Investigated"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "No Action Required"
                        });
                });

            modelBuilder.Entity("nemesis.Models.Upvote", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReportID")
                        .HasColumnType("int");

                    b.Property<int?>("ReportViewModelId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ReportID");

                    b.HasIndex("ReportID");

                    b.HasIndex("ReportViewModelId");

                    b.HasIndex("UserId", "ReportID")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("UserId", "ReportID"), false);

                    b.ToTable("Upvotes");
                });

            modelBuilder.Entity("nemesis.ViewModels.CategoryViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryViewModel");
                });

            modelBuilder.Entity("nemesis.ViewModels.ReportViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfReport")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSpotted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvestigationId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("ReportViewModel");
                });

            modelBuilder.Entity("nemesis.ViewModels.StatusViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("nemesis.Models.Investigation", b =>
                {
                    b.HasOne("nemesis.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("nemesis.Models.Report", b =>
                {
                    b.HasOne("nemesis.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nemesis.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("nemesis.Models.Upvote", b =>
                {
                    b.HasOne("nemesis.Models.Report", "Report")
                        .WithMany("Upvotes")
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("nemesis.ViewModels.ReportViewModel", null)
                        .WithMany("Upvotes")
                        .HasForeignKey("ReportViewModelId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nemesis.ViewModels.ReportViewModel", b =>
                {
                    b.HasOne("nemesis.ViewModels.CategoryViewModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("nemesis.ViewModels.StatusViewModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("nemesis.Models.Report", b =>
                {
                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("nemesis.ViewModels.ReportViewModel", b =>
                {
                    b.Navigation("Upvotes");
                });
#pragma warning restore 612, 618
        }
    }
}
